# -*- coding: utf-8 -*-
"""Problem 6: Union and Intersection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w4xXrSulQeymPYyxjURHN75lfi6l3scM
"""

import collections
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

    def __repr__(self):
        return str(self.value)


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __str__(self):
        cur_head = self.head
        out_string = ""
        while cur_head:
            out_string += str(cur_head.value) + " -> "
            cur_head = cur_head.next
        return out_string


    def append(self, value):

        if self.head is None:
            self.head = Node(value)
            self.tail = self.head
            return self.head

        else:
            self.tail.next = Node(value)
            self.tail = self.tail.next
            return self.head
    def size(self):
        size = 0
        node = self.head
        while node:
            size += 1
            node = node.next

        return size

def union(llist_1, llist_2):
    # Your Solution Here

    # Temporary set to hold linked List value
    temp_set = set()      
    temp_linked_list = LinkedList()
    node = llist_1.head

    # Loop to store all value in temp_set
    while node:
      temp_set.add(node.value)
      node  = node.next

    node =llist_2.head
    while node:
      temp_set.add(node.value)
      node  = node.next

    #print(temp_set)

    for element in temp_set:
      temp_linked_list.append(element)

    return temp_linked_list

def intersection(llist_1, llist_2):
    # Your Solution Here

    # To hold llist_1 values
    set1 = set()

    # To hold llist_1 values
    set2 = set()

    # node is a temporary variable used to traverse LinkedList
    node1 = llist_1.head
    node2 = llist_2.head
    while node2 or node1:
      if node1 is not None:
        set1.add(node1.value)
        node1 = node1.next
      if node2 is not None:
        set2.add(node2.value)
        node2 = node2.next
    #print(set1)
    #print(set2) 

    final_set = set1.intersection(set2)
    temp_linked_list = LinkedList()
    for element in final_set:
      temp_linked_list.append(element)
    return temp_linked_list

      
# function to convert LinkedList to list
def LL_to_List(llist):
  
  current_node = llist.head

  #Temporary List
  temp_list = list()
  while current_node:
    temp_list.append(current_node.value)
    current_node = current_node.next
  return temp_list

  
"""Using Counter(), we usually are able to get frequency of each element in list, checking
 for it, for both the list, we can check if two lists are identical or not. But this method
  also ignores the ordering of the elements in the list and only takes into account the
   frequency of elements.
"""
# test function
def test_func(sample,target):
  if type(sample) is not list:
    sample = LL_to_List(sample)
  if collections.Counter(sample) == collections.Counter(target):
    #print(sample)
    #print(target)
    print('Pass')
  else:
    print('Fail')


# Test case 1

linked_list_1 = LinkedList()
linked_list_2 = LinkedList()

element_1 = [3,2,4,35,6,65,6,4,3,21]
element_2 = [6,32,4,9,6,1,11,21,1]

for i in element_1:
    linked_list_1.append(i)

for i in element_2:
    linked_list_2.append(i)

print ("UNION :",union(linked_list_1,linked_list_2)) #32 -> 65 -> 2 -> 35 -> 3 -> 4 -> 6 -> 1 -> 9 -> 11 -> 21 ->
print ("INTERSECTION",intersection(linked_list_1,linked_list_2)) #4 -> 21 -> 6 -> 
print('--------------------------------------------------------------------------------------------')

# Test case 2

linked_list_3 = LinkedList()
linked_list_4 = LinkedList()

element_1 = [3,2,4,35,6,65,6,4,3,23]
element_2 = [1,7,8,9,11,21,1]

for i in element_1:
    linked_list_3.append(i)

for i in element_2:
    linked_list_4.append(i)

print ("UNION",union(linked_list_3,linked_list_4))  # 65 -> 2 -> 35 -> 3 -> 4 -> 6 -> 1 -> 7 -> 8 -> 9 -> 11 -> 21 -> 23 -> 
print ("INTERSECTION",intersection(linked_list_3,linked_list_4)) # Null because to element comman
print('--------------------------------------------------------------------------------------------')

linked_list_5 = LinkedList()
linked_list_6 = LinkedList()

element_1 = []
element_2 = [1, 7, 8, 9, 11, 21, 1]

for i in element_1:
    linked_list_5.append(i)

for i in element_2:
    linked_list_6.append(i)

# Union operation element_1 is empty so return element_2 [1, 7, 8, 9, 11, 21, 1]
print('\nUnion operation: ', union(linked_list_5, linked_list_6))
# Intersection operation element_1 is empty so 0 intersections
print('Intersection operation: ', intersection(linked_list_5, linked_list_6))
print('--------------------------------------------------------------------------------------------')

